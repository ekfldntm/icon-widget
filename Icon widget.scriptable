{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "orange",
    "glyph" : "th-large"
  },
  "name" : "Icon widget",
  "script" : "\n\/\/날씨 api, 투명배경 설절\nlet weatherapi = \"openweathermap api키 입력\"\nlet wallpaper = \"배경 파일 북마크 입력\"\n\n\n\n\/\/__________________________________________________________________________________________\nlet widget = new ListWidget()\n\n\/\/const 변수 선언\nconst today = new Date()\nconst fm = FileManager.iCloud()\nconst batteryLevel = Math.floor(Device.batteryLevel() * 100)\n\n\ntry {\n    let background = fm.bookmarkedPath(wallpaper)\n    widget.backgroundImage = fm.readImage(background)\n} catch (e) {\n    widget.backgroundImage = await new Request(\"https:\/\/raw.githubusercontent.com\/jbmulb\/icon-widget\/main\/background\/wallpaper.png\").loadImage()\n}\n\nconst iconwidgetfolder = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\")\nif(!fm.fileExists(iconwidgetfolder)){\n    fm.createDirectory(iconwidgetfolder)\n}\n\nfunction getFilePath() {\n    let dirPath = fm.documentsDirectory()\n    return fm.joinPath(\n      dirPath,\n      \"iconwidget\/weather.json\")\n}\n\nvar loc = fm.joinPath(fm.documentsDirectory(), \"iconwidget\/weather.json\")\nif(!fm.fileExists(loc)){\n    await getlocationapi()\n    console.log(\"날씨 파일 생성\")\n} else {\n    let rawString = fm.read(getFilePath()).toRawString()\n    let locinfo = JSON.parse(rawString)\n    if (locinfo.number == 100) {\n        await getlocationapi()\n    }else {\n        console.log(locinfo.number)\n        let contents = `{\"number\" : ${locinfo.number + 1},\"loc\" : {\"lat\" : ${locinfo.loc.lat},\"lon\" : ${locinfo.loc.lon}}}`\n\t    fm.writeString(\"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/iconwidget\/weather.json\", contents)\n        console.log(\"위치 갱신 X\")\n    }\n}\n\nasync function getlocationapi() {\n    const loc = await Location.current()\n    const lat = loc.latitude.toFixed(2)\n    const lon = loc.longitude.toFixed(2)\n    let contents = `{\"number\" : 0,\"loc\" : {\"lat\" : ${lat},\"lon\" : ${lon}}}`\n\tfm.writeString(\"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/iconwidget\/weather.json\", contents)\n    console.log(\"위치 갱신 완료 완료\")\n}\n\n\n\/\/코로나 _____________________________________________________________________________________________________________________\nconst covidreq = new Request(\"https:\/\/coronavirus-19-api.herokuapp.com\/countries\/S.%20Korea\")\nconst covidinfo = await covidreq.loadJSON()\n\n\/\/날씨 아이콘 다운로드\nvar loc = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\/weather\")\nif(!fm.fileExists(loc)){\n    console.log(\"날씨 아이콘 다운로드 시작\")\n    await downloadweathericon()\n} else {\n    console.log(\"날씨 아이콘 있음\")\n}\n\n\nasync function downloadweathericon() {\n    let names = [\"01n\", \"01d\", \"02n\", \"02d\", \"03d\", \"03n\", \"04n\", \"04d\", \"09n\", \"09d\", \"10d\", \"10n\", \"11d\", \"11n\", \"13n\", \"13d\", \"50n\", \"50d\"]\n\n    \n    var coding = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\")\n    \n    for(i in names){\n        const url = \"https:\/\/raw.githubusercontent.com\/jbmulb\/icon-widget\/main\/weathericon\/\" + names[i] + \".png\"\n        var weather = fm.joinPath(coding, \"\/weather\")\n        if(!fm.fileExists(weather)){\n            fm.createDirectory(weather)\n        }\n        let loc = \"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/iconwidget\/weather\/\" + names[i] + \".png\"\n        let image = await new Request(url).loadImage()\n        fm.writeImage(loc, image)\n    }\n    console.log(\"날씨 아이콘 다운로드 완료\")\n}\n\n\/\/배터리 아이콘 다운로드\n\nvar loc = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\/battery\")\nif(!fm.fileExists(loc)){\n    console.log(\"배터리 아이콘 다운로드 시작\")\n    await downloadbatteryicon()\n} else {\n    console.log(\"배터리 아이콘 있음\")\n}\n\n\nasync function downloadbatteryicon() {\n    let names = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]\n\n    \n    var coding = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\")\n    \n    for(i in names){\n        const url = \"https:\/\/raw.githubusercontent.com\/jbmulb\/icon-widget\/main\/battery\/\" + names[i] + \".png\"\n        var weather = fm.joinPath(coding, \"\/battery\")\n        if(!fm.fileExists(weather)){\n            fm.createDirectory(weather)\n        }\n        let loc = \"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/iconwidget\/battery\/\" + names[i] + \".png\"\n        let image = await new Request(url).loadImage()\n        fm.writeImage(loc, image)\n    }\n    console.log(\"배터리 아이콘 다운로드 완료\")\n}\n\n\/\/음악 배경 다운로드\n\nvar loc = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\/icon\/music.png\")\nif(!fm.fileExists(loc)){\n    console.log(\"음악 아이콘 다운로드 시작\")\n    await downloadmusicicon()\n} else {\n    console.log(\"음악 아이콘 있음\")\n}\n\nasync function downloadmusicicon() {\n    \n    var coding = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\")\n\n\tconst url = \"https:\/\/raw.githubusercontent.com\/jbmulb\/icon-widget\/main\/icon\/music.png\"\n\tvar wallpaper = fm.joinPath(coding, \"\/icon\")\n\tif(!fm.fileExists(wallpaper)){\n\t\tfm.createDirectory(wallpaper)\n\t}\n\tlet loc = \"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/iconwidget\/icon\/music.png\"\n\tlet image = await new Request(url).loadImage()\n\tfm.writeImage(loc, image)\n    console.log(\"음악 아이콘 다운로드 완료\")\n}\n\n\/\/코로나 배경 다운로드\n\nvar loc = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\/icon\/covid.png\")\nif(!fm.fileExists(loc)){\n    console.log(\"코로나 아이콘 다운로드 시작\")\n    await downloadcovidicon()\n} else {\n    console.log(\"코로나 아이콘 있음\")\n}\n\nasync function downloadcovidicon() {\n    \n    var coding = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\")\n\n\tconst url = \"https:\/\/raw.githubusercontent.com\/jbmulb\/icon-widget\/main\/icon\/covid.png\"\n\tvar wallpaper = fm.joinPath(coding, \"\/icon\")\n\tif(!fm.fileExists(wallpaper)){\n\t\tfm.createDirectory(wallpaper)\n\t}\n\tlet loc = \"\/var\/mobile\/Library\/Mobile Documents\/iCloud~dk~simonbs~Scriptable\/Documents\/iconwidget\/icon\/covid.png\"\n\tlet image = await new Request(url).loadImage()\n\tfm.writeImage(loc, image)\n    console.log(\"코로나 아이콘 다운로드 완료\")\n}\n\n\/\/위젯 사이즈 구하기\ndeviceScreen = Device.screenSize()\nlet padding = ((deviceScreen.width - 240) \/5)\nlet x = (240 + padding * 3)\nlet y = (120 + padding)\n\n\/\/stack 생성\nlet stack = widget.addStack()\nstack.layoutVertically()\n\n\/\/top stack 생성\nlet top = stack.addStack()\ntop.layoutHorizontally()\ntop.size = new Size(x, (8 * y \/ 23))\n\n\/\/요일 stack 생성\nlet dayoftheweek = top.addStack()\ndayoftheweek.size = new Size((x * 2 \/ 3), (8 * y \/ 23))\n\n\/\/요일 stack 코드\nlet week = new Array(\"SUNDAY\", \"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\")\n\nlet day = dayoftheweek.addText(week[today.getDay()])\nday.textColor = new Color(\"#000000\")\nday.font = new Font(\"Megrim\", 37)\n\n\/\/월, 일 stack 생성\nlet daymore = top.addStack()\ndaymore.size = new Size((x * 2 \/ 5), (8 * y \/ 23))\ndaymore.layoutVertically()\n\n\/\/월 stack 생성\nlet month = daymore.addStack()\nmonth.size = new Size((x * 1 \/ 3), (8 * y \/ 23) \/ 2)\n\n\/\/월 stack 코드\nlet month1 = new Array(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\")\nlet monthtxt = month.addText(month1[today.getMonth()])\nmonthtxt.textColor = new Color(\"#000000\")\nmonthtxt.font = new Font(\"Megrim\", 20)\n\n\/\/일 stack 생성\nlet date = daymore.addStack()\ndate.size = new Size((x * 2 \/ 5), (8 * y \/ 23) \/ 2)\n\n\/\/일 stack 코드\nlet dateunit = \"th\"\nif (today.getDate() == 1) {\n    dateunit = \"st\"\n}else if (today.getDate() == 2){\n    dateunit = \"nd\"\n}else if (today.getDate() == 3){\n    dateunit = \"rd\"\n}\nlet datetxt = date.addText(`${today.getDate()}${dateunit}`)\ndatetxt.textColor = new Color(\"#000000\")\ndatetxt.font = new Font(\"Megrim\", 20)\n\n\/\/bottom stack 생성\nlet bottom = stack.addStack()\nbottom.centerAlignContent()\nbottom.size = new Size(x, (y - (8 * y \/ 23)))\n\n\/\/날씨 stack 생성\nlet weather = bottom.addStack()\nweather.size = new Size(60, 80)\nweather.layoutVertically()\n\/\/날씨 stack 코드\n\/\/날씨 icon\nlet weathericon = weather.addStack()\nweathericon.size = new Size(60, 60)\nweathericon.backgroundColor = new Color(\"00ffff\")\nweathericon.cornerRadius = 15\n\nlet rawString1 = fm.read(getFilePath()).toRawString()\nlet locinfo = JSON.parse(rawString1)\n\nweathericon.url = `https:\/\/weather.com\/weather\/today\/l\/${locinfo.loc.lat},${locinfo.loc.lon}?par=apple_`\nconst weatherurl = `https:\/\/api.openweathermap.org\/data\/2.5\/weather?lat=${locinfo.loc.lat}&lon=${locinfo.loc.lon}&appid=${weatherapi}&units=metric`\nconst req2 = new Request(weatherurl)\nconst weatherinfo = await req2.loadJSON()\n\nweathericon.centerAlignContent()\nlet weatherimg = weathericon.addImage(fm.readImage(fm.joinPath(fm.documentsDirectory(), `\/iconwidget\/weather\/${weatherinfo.weather[0].icon}.png`)))\nweatherimg.imageSize = new Size(40, 40)\n\n\/\/날씨 설명\nlet weatherdescrip = weather.addStack()\nweatherdescrip.size = new Size(60, 20)\nweatherdescrip.bottomAlignContent()\nlet temp = weatherdescrip.addText(`${weatherinfo.main.temp}℃`)\ntemp.textColor = new Color(\"#000000\")\ntemp.font = new Font(\"swagger\", 15)\n\n\nbottom.addSpacer((x - 240) \/ 3)\n\n\n\/\/음악 stack 생성\nlet music = bottom.addStack()\nmusic.size = new Size(60, 80)\nmusic.layoutVertically()\n\n\/\/음악 stack 코드\n\/\/음악 icon\nlet musicicon = music.addStack()\nmusicicon.size = new Size(60, 60)\nmusicicon.cornerRadius = 15\nmusicicon.backgroundColor = new Color(\"#FFFFA6\")\nmusicicon.centerAlignContent()\nmusicicon.url = \"spotify:\/\/\"\n\n\/\/음악 icon stack 코드\n\/\/음악정보 func로부터 return 받기\nlet path = fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\/spotifyapi.json\")\nlet apiinfo\nlet musicinfo = await spotifyapiexistence()\n\nif (musicinfo == \"no api\") {\n    console.log(\"no api\")\n}else if (musicinfo == \"not playing\") {\n    let musicimg = musicicon.addImage(fm.readImage(fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\/icon\/music.png\")))\n    musicimg.imageSize = new Size(34.03, 40)\n}else {\n    musicicon.url = `spotify:\/\/track\/${musicinfo[3]}`\n    let musicimgres = await new Request(musicinfo[2]).loadImage()\n    let musicimg = musicicon.addImage(musicimgres)\n    musicimg.imageSize = new Size(60, 60)\n}\n\n\/\/음악 설명\nlet musicdescrip = music.addStack()\nmusicdescrip.size = new Size(60, 20)\nmusicdescrip.bottomAlignContent()\n\nif (musicinfo == \"no api\") {\n    let noapi = musicdescrip.addText(\"no api file\")\n    noapi.textColor = new Color(\"#000000\")\n    noapi.font = new Font(\"swagger\", 15)\n}else if (musicinfo == \"not playing\") {\n    let notplaying = musicdescrip.addText(\"not playing\")\n    notplaying.textColor = new Color(\"#000000\")\n    notplaying.font = new Font(\"swagger\", 15)\n}else {\n    let musictitle = musicdescrip.addText(`${musicinfo[0]}, ${musicinfo[1]}`)\n    musictitle.textColor = new Color(\"#000000\")\n    musictitle.font = new Font(\"swagger\", 10)\n}\n\n\nbottom.addSpacer((x - 240) \/ 3)\n\n\n\/\/코로나 stack 생성\nlet covid = bottom.addStack()\ncovid.size = new Size(60, 80)\ncovid.layoutVertically()\n\n\/\/코로나 stack 코드\n\/\/코로나 icon\nlet covidicon = covid.addStack()\ncovidicon.size = new Size(60, 60)\ncovidicon.backgroundColor = new Color(\"fadedd\")\ncovidicon.cornerRadius = 15\ncovidicon.url = \"https:\/\/corona-live.com\"\nlet covidimg = covidicon.addImage(fm.readImage(fm.joinPath(fm.documentsDirectory(), \"\/iconwidget\/icon\/covid.png\")))\ncovidimg.imageSize = new Size(60, 60)\n\/\/코로나 설명\nlet coviddescrip = covid.addStack()\ncoviddescrip.size = new Size(60, 20)\ncoviddescrip.bottomAlignContent()\nlet covidtxt = coviddescrip.addText(`${covidinfo.todayCases}명`)\ncovidtxt.textColor = new Color(\"#000000\")\ncovidtxt.font = new Font(\"swagger\", 15)\n\n\nbottom.addSpacer((x - 240) \/ 3)\n\n\n\/\/배터리 stack 생성\nlet battery = bottom.addStack()\nbattery.size = new Size(60, 80)\nbattery.layoutVertically()\n\n\/\/배터리 stack 코드\n\/\/배터리 icon\nlet batteryicon = battery.addStack()\nbatteryicon.size = new Size(60, 60)\nbatteryicon.backgroundColor = new Color(\"A1E55C\")\nbatteryicon.cornerRadius = 15\nbatteryicon.centerAlignContent()\nlet batteryimg = batteryicon.addImage(fm.readImage(fm.joinPath(fm.documentsDirectory(), `\/iconwidget\/battery\/${Math.ceil(batteryLevel \/ 5)}.png`)))\nbatteryimg.imageSize = new Size(38,28)\n\n\/\/배터리 설명\nlet batterydescrip = battery.addStack()\nbatterydescrip.size = new Size(60, 20)\nbatterydescrip.bottomAlignContent()\nlet batterytxt = batterydescrip.addText(`${batteryLevel}%`)\nbatterytxt.textColor = new Color(\"#000000\")\nbatterytxt.font = new Font(\"swagger\", 15)\n\n\nif(!config.runsInWidget){\n    widget.presentMedium()\n}\n\nScript.setWidget(widget)\nScript.complete()\n\n\n\/\/음악위젯 func\nasync function spotifyapiexistence() {\n    if(fm.fileExists(path)) {\n      await fm.downloadFileFromiCloud(path)\n      let spotifyCredentialsFile = Data.fromFile(path)\n      apiinfo = JSON.parse(spotifyCredentialsFile.toRawString())\n      return await spotify()\n    } else {\n        \/\/cridit 파일 없음\n        return \"no api\"\n    }\n  }\n  \nasync function spotify() {\n    \/\/현재 재생 노래 불러오기\n    const req = new Request(\"https:\/\/api.spotify.com\/v1\/me\/player\")\n    req.headers = { \"Authorization\": \"Bearer \" + apiinfo.accessToken, \"Content-Type\": \"application\/json\" }\n    let result = await req.load()\n    if (req.response.statusCode == 401) {\n        let success = await refreshSpotifyAccessToken()\n        console.log(\"api refresh\")\n        if(success) {\n            console.log(\"refresh 성공\")\n        } else {\n            console.log(\"refresh 실패\")\n        }\n    } else if (req.response.statusCode == 204) {\n        \/\/ 현재 노래 안들음\n        return \"not playing\"\n    } else if (req.response.statusCode == 200) {\n        result = JSON.parse(result.toRawString())\n        let title = result.item.name\n        let artist = result.item.artists[0].name\n        let coverUrl = result.item.album.images[0].url\n        let id = result.item.id\n        let musicinfo = [title, artist, coverUrl, id]\n        \/\/ console.log(result)\n        \/\/ console.log(title)\n        \/\/ console.log(artist)\n        \/\/ console.log(coverUrl)\n        return musicinfo\n    }\n}\n  \nasync function refreshSpotifyAccessToken() {\n    if(apiinfo != null) {\n    let req = new Request(\"https:\/\/accounts.spotify.com\/api\/token\")\n    req.method = \"POST\"\n    req.headers = { \"Content-Type\": \"application\/x-www-form-urlencoded\" }\n    req.body = `grant_type=refresh_token&refresh_token=${apiinfo.refreshToken}&client_id=${apiinfo.clientId}&client_secret=${apiinfo.clientSecret}`\n    let result = await req.loadJSON()\n    apiinfo.accessToken = result.access_token\n    let fm = FileManager.iCloud()\n    let dir = fm.documentsDirectory()\n    let path = fm.joinPath(dir, \"\/iconwidget\/spotifyapi.json\")\n    fm.write(path, Data.fromString(JSON.stringify(apiinfo)))\n    return true\n    }\n    return false\n    \n}",
  "share_sheet_inputs" : [

  ]
}